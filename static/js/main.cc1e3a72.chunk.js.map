{"version":3,"sources":["logo.svg","Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TableHeader","TableBody","props","rows","characterData","map","item","index","key","name","job","onClick","removeCharacterData","Table","Form","initialState","state","handleChange","e","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,8MCErCC,G,MAAc,WAChB,OACI,+BACI,4BACI,oCACA,uCAMVC,EAAY,SAACC,GACf,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAMC,GACxC,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAKG,MACV,4BAAKH,EAAKI,KACV,4BACI,4BAAQC,QAAS,kBAAMT,EAAMU,oBAAoBL,KAAjD,eAMhB,OAAO,+BAAQJ,IAcJU,EAXD,SAACX,GAAW,IACdE,EAAuCF,EAAvCE,cAAeQ,EAAwBV,EAAxBU,oBAEvB,OACI,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,cAAgBA,EAAgBQ,oBAAsBA,M,OCY9DE,E,4MA5CXC,aAAe,CACXN,KAAM,GACNC,IAAK,I,EAGTM,MAAQ,EAAKD,a,EAEbE,aAAe,SAACC,GAAO,IAAD,EACMA,EAAEC,OAAlBV,EADU,EACVA,KAAMW,EADI,EACJA,MAEd,EAAKC,SAAL,eACKZ,EAAOW,K,EAGhBE,WAAa,WACT,EAAKpB,MAAMqB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,uDAGb,IAAD,EACiBS,KAAKR,MAAnBP,EADH,EACGA,KAAMC,EADT,EACSA,IAEd,OACE,8BACE,2BAAOe,QAAQ,QAAf,QACA,2BACEC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHP,MAAOX,EACPmB,SAAUJ,KAAKP,eACjB,2BAAOQ,QAAQ,OAAf,OACA,2BACEC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAAOV,EACPkB,SAAUJ,KAAKP,eACjB,2BAAOS,KAAK,SAASN,MAAM,SAAST,QAASa,KAAKF,kB,GAvC3CO,aCsDJC,E,4MAhDdd,MAAQ,CACPe,WAAY,CACR,CACEtB,KAAM,UACNC,IAAK,WAEP,CACED,KAAM,MACNC,IAAK,WAEP,CACED,KAAM,MACNC,IAAK,mBAEP,CACED,KAAM,SACNC,IAAK,e,EAKZE,oBAAsB,SAACL,GAAW,IACzBwB,EAAe,EAAKf,MAApBe,WAER,EAAKV,SAAS,CACbU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACzC,OAAOA,IAAM3B,Q,EAKhBgB,aAAe,SAACU,GACf,EAAKZ,SAAS,CAAEU,WAAW,GAAD,mBAAM,EAAKf,MAAMe,YAAjB,CAA6BE,O,uDAIrD,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,EAAD,CAAOlC,cAAgBoB,KAAKR,MAAMe,WAAanB,oBAAsBY,KAAKZ,sBAC/E,kBAAC,EAAD,CAAMW,aAAcC,KAAKD,qB,GA3CZM,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc1e3a72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst TableHeader = () => {\n    return (\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Job</th>\n            </tr>\n        </thead>\n    )\n}\n\nconst TableBody = (props) => {\n    const rows = props.characterData.map((item, index) => {\n        return (\n            <tr key={index}>\n                <td>{item.name}</td>\n                <td>{item.job}</td>\n                <td>\n                    <button onClick={() => props.removeCharacterData(index)}>Delete</button>\n                </td>\n            </tr>\n        )\n    });\n\n    return <tbody>{rows}</tbody>\n}\n\nconst Table = (props) => {\n    const { characterData, removeCharacterData } = props;\n\n    return (\n        <table>\n            <TableHeader />\n            <TableBody characterData={ characterData } removeCharacterData={ removeCharacterData } />\n        </table>\n    )\n}\n\nexport default Table\n","import React, { Component } from 'react'\n\nclass Form extends Component {\n    initialState = {\n        name: '',\n        job: '',\n    }\n\n    state = this.initialState\n\n    handleChange = (e) => {\n        const { name, value } = e.target;\n\n        this.setState({\n            [name]: value,\n        })\n    }\n    submitForm = () => {\n        this.props.handleSubmit(this.state);\n        this.setState(this.initialState);\n    }\n\n    render() {\n        const { name, job } = this.state;\n      \n        return (\n          <form>\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              value={name}\n              onChange={this.handleChange} />\n            <label htmlFor=\"job\">Job</label>\n            <input\n              type=\"text\"\n              name=\"job\"\n              id=\"job\"\n              value={job}\n              onChange={this.handleChange} />\n            <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n          </form>\n        );\n      }\n}\n\nexport default Form\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends Component {\n\t\n\tstate = {\n\t\tcharacters: [\n      {\n        name: 'Charlie',\n        job: 'Janitor',\n      },\n      {\n        name: 'Mac',\n        job: 'Bouncer',\n      },\n      {\n        name: 'Dee',\n        job: 'Aspring actress',\n      },\n      {\n        name: 'Dennis',\n        job: 'Bartender',\n      },\n    ]\n\t}\n\n\tremoveCharacterData = (index) => {\n\t\tconst { characters } = this.state;\n\n\t\tthis.setState({\n\t\t\tcharacters: characters.filter((character, i) => {\n\t\t\t\treturn i !== index;\n\t\t\t}),\n\t\t});\n\t}\n\n\thandleSubmit = (character) => {\n\t\tthis.setState({ characters: [...this.state.characters, character] })\n\t}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Table characterData={ this.state.characters } removeCharacterData={ this.removeCharacterData } />\n\t\t\t\t\t<Form handleSubmit={this.handleSubmit} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}